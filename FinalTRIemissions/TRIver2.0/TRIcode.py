# -*- coding: utf-8 -*-
"""
Created on Wed Jul 12 15:42:03 2017

@author: tghosh
"""

import pandas as pd
import numpy as np

#Reading the TRI main File. We need to repeat all these operations for a variety of emissionsin TRI. TO reduce complication I will be using Separate Runs for Each.THe list will be provided
# Please find and replace the names of the different emissions in the code and run the code to get different emissions. 
#LIST OF columns being compiled to be presented in different sheets - TOTAL SOIL RELEASE, TOTAL SOIL RELEASE, 

tri = pd.read_csv("TRI.csv", header=0,usecols=['TRIFID', 'FACILITY NAME', 'CAS NUMBER', 'CHEMICAL NAME','UNIT OF MEASURE','TOTAL SOIL RELEASE'], nrows= 82444, error_bad_lines=False)

#Dropping Unecessary items
tri = tri.dropna(subset = ['TRIFID'])
tri = tri.dropna(subset = ['TOTAL SOIL RELEASE'])

#Read Egrid bridge
bridge = pd.read_csv("egridtotri.csv", header=0,usecols=['TRI ID','PNAME','EGRID ID'], dtype={'TRI ID':"str",'PNAME':"str",'EGRID ID':"str"}, nrows= 1225, error_bad_lines=False)


#Converting to Float and then changing units
tri['TOTAL SOIL RELEASE'] = pd.to_numeric(tri['TOTAL SOIL RELEASE'],errors = 'coerce')

sLength = len(tri['TOTAL SOIL RELEASE'])
tri['TOTAL SOIL RELEASE1'] = pd.Series(np.random.randn(sLength), index=tri.index)
tri['TOTAL SOIL RELEASE1'][tri['UNIT OF MEASURE'] == 'Pounds'] = 0.45392*tri['TOTAL SOIL RELEASE']
tri['TOTAL SOIL RELEASE1'][tri['UNIT OF MEASURE'] == 'Grams'] = 0.001*tri['TOTAL SOIL RELEASE']
tri['UNITS'] = pd.Series(np.random.randn(sLength), index=tri.index)
tri['UNITS'] = 'kg';

del tri['TOTAL SOIL RELEASE']

#Changing the names from Old to new
nameair = pd.read_csv("NameBridgeSoil.csv")
tri1  = pd.merge(nameair,tri,left_on = ['OriginalName'], right_on = ['CHEMICAL NAME'])

tri= tri1;



del tri['OriginalName']
del tri['CHEMICAL NAME']
del tri['CAS NUMBER']

#This part of the code essentially sums up all the similar emissions from every facility into one emissions
tri['TOTAL SOIL RELEASE'] = tri.groupby(['TRIFID', 'FACILITY NAME', 'NewName'])['TOTAL SOIL RELEASE1'].transform('sum')

#Delete should be before dropduplicate
del tri['TOTAL SOIL RELEASE1']
del tri['UNIT OF MEASURE']
tri = tri.drop_duplicates()






#MErging with the BRIDGE and then restructuring to make it look like Egrid and saving a copy of the database
egtri = pd.merge(bridge,tri,left_on = ['TRI ID'], right_on = ['TRIFID'])

#Keep a backup and then Remove this line from the code
#egtribu = egtri; 
bckup = egtri.copy(deep=True)

del egtri['TRI ID']
del egtri['TRIFID']
del egtri['FACILITY NAME']
#Solving the problem where there are multiple TRI IDS for the SAME EGRID ID. ALL we need to do is sum them up.
egtri['TOTAL SOIL RELEASE2'] = egtri.groupby(['UNITS','PNAME','EGRID ID','NewName'])['TOTAL SOIL RELEASE'].transform('sum')

del egtri['TOTAL SOIL RELEASE']
egtri['TOTAL SOIL RELEASE'] = egtri['TOTAL SOIL RELEASE2']


final_tri = egtri.pivot_table('TOTAL SOIL RELEASE', ['UNITS','PNAME','EGRID ID'],'NewName')
final_tri.reset_index( drop=False, inplace=True)
#final_tri.to_csv('egtri2.csv')

tri = final_tri
del final_tri
merger = bckup[['TRIFID', 'FACILITY NAME','EGRID ID']].copy()
tri2 = pd.merge(merger,tri,left_on = ['EGRID ID'], right_on = ['EGRID ID'])
tri3 = tri2.drop_duplicates(subset='EGRID ID', keep='first') 
egrid = pd.read_csv("eGRIDPLNT2014.csv", header=0,usecols=['EGRID ID','Plant name','Generation'], nrows= 8504, error_bad_lines=False)
tri3['EGRID ID'] = pd.to_numeric(tri3['EGRID ID'],errors = 'coerce')
tri4 = pd.merge(egrid,tri3,left_on = ['EGRID ID'], right_on = ['EGRID ID'])
del tri4['FACILITY NAME']
del tri4['PNAME']
tri4.to_csv('tri4.csv')

#THis Next BLOCK IS NOT NEEDED  ANY MORE> . THIS WORK IS ALREADY DONE.
#However This block was used to gerenate the estimate files and can be used for that purpose if needed. 
#print(tri.columns.tolist())
#['TRIFID', 'FACILITY NAME', 'UNITS', 'PNAME', 'EGRID ID', '1,1,1,2-TETRACHLOROETHANE', '1,1,1-TRICHLOROETHANE', '1,1,2,2-TETRACHLOROETHANE', '1,1,2-TRICHLOROETHANE', '1,2,3-TRICHLOROPROPANE', '1,2,4-TRICHLOROBENZENE', '1,2,4-TRIMETHYLBENZENE', '1,2-BUTYLENE OXIDE', '1,2-DIBROMOETHANE', '1,2-DICHLOROETHANE', '1,2-DICHLOROETHYLENE', '1,2-DICHLOROPROPANE', '1,2-PHENYLENEDIAMINE', '1,3-BUTADIENE', '1,3-DICHLOROPROPYLENE', '1,3-PHENYLENEDIAMINE', '1,4-DICHLORO-2-BUTENE', '1,4-DIOXANE', '1-(3-CHLOROALLYL)-3,5,7-TRIAZA-1-AZONIAADAMANTANE CHLORIDE', '2,2-DICHLORO-1,1,1-TRIFLUOROETHANE', '2,3-DICHLOROPROPENE', '2,4,6-TRICHLOROPHENOL', '2,4-DIAMINOTOLUENE', '2,4-DICHLOROPHENOL', '2,4-DIMETHYLPHENOL', '2,4-DINITROPHENOL', '2,4-DINITROTOLUENE', '2-ETHOXYETHANOL', '2-METHOXYETHANOL', '2-METHYLLACTONITRILE', '2-METHYLPYRIDINE', '2-PHENYLPHENOL', "4,4'-ISOPROPYLIDENEDIPHENOL", "4,4'-METHYLENEDIANILINE", 'ACETALDEHYDE', 'ACETAMIDE', 'ACETONITRILE', 'ACETOPHENONE', 'ACROLEIN', 'ACRYLAMIDE', 'ACRYLIC ACID', 'ACRYLONITRILE', 'ALLYL ALCOHOL', 'ALLYL CHLORIDE', 'ALUMINUM (FUME OR DUST)', 'ALUMINUM OXIDE (FIBROUS FORMS)', 'AMMONIA', 'ANILINE', 'ANTHRACENE', 'ANTIMONY', 'ANTIMONY COMPOUNDS', 'ARSENIC', 'ARSENIC COMPOUNDS', 'ASBESTOS (FRIABLE)', 'BARIUM', 'BARIUM COMPOUNDS', 'BENZENE', 'BENZO(G,H,I)PERYLENE', 'BENZOYL CHLORIDE', 'BENZYL CHLORIDE', 'BERYLLIUM', 'BERYLLIUM COMPOUNDS', 'BIPHENYL', 'BIS(2-CHLORO-1-METHYLETHYL) ETHER', 'BIS(2-CHLOROETHYL) ETHER', 'BORON TRIFLUORIDE', 'BROMINE', 'BROMOFORM', 'BROMOMETHANE', 'BUTYL ACRYLATE', 'BUTYRALDEHYDE', 'CADMIUM', 'CADMIUM COMPOUNDS', 'CARBON DISULFIDE', 'CARBON TETRACHLORIDE', 'CARBONYL SULFIDE', 'CATECHOL', 'CERTAIN GLYCOL ETHERS', 'CHLORINE', 'CHLORINE DIOXIDE', 'CHLOROBENZENE', 'CHLORODIFLUOROMETHANE', 'CHLOROETHANE', 'CHLOROFORM', 'CHLOROMETHANE', 'CHLOROPRENE', 'CHROMIUM', 'CHROMIUM COMPOUNDS(EXCEPT CHROMITE ORE MINED IN THE TRANSVAAL REGION)', 'COBALT', 'COBALT COMPOUNDS', 'COPPER', 'COPPER COMPOUNDS', 'CREOSOTE', 'CRESOL (MIXED ISOMERS)', 'CROTONALDEHYDE', 'CUMENE', 'CUMENE HYDROPEROXIDE', 'CYANIDE COMPOUNDS', 'CYCLOHEXANE', 'CYCLOHEXANOL', 'DAZOMET', 'DI(2-ETHYLHEXYL) PHTHALATE', 'DIAMINOTOLUENE (MIXED ISOMERS)', 'DIBENZOFURAN', 'DIBUTYL PHTHALATE', 'DICHLOROBENZENE (MIXED ISOMERS)', 'DICHLOROBROMOMETHANE', 'DICHLORODIFLUOROMETHANE', 'DICHLOROMETHANE', 'DICHLOROTRIFLUOROETHANE', 'DICYCLOPENTADIENE', 'DIETHANOLAMINE', 'DIISOCYANATES', 'DIMETHYL PHTHALATE', 'DIMETHYL SULFATE', 'DIMETHYLAMINE', 'DINITROTOLUENE (MIXED ISOMERS)', 'DIOXIN AND DIOXIN-LIKE COMPOUNDS', 'DIPHENYLAMINE', 'DIPOTASSIUM ENDOTHALL', 'EPICHLOROHYDRIN', 'ETHYL ACRYLATE', 'ETHYLBENZENE', 'ETHYLENE', 'ETHYLENE GLYCOL', 'ETHYLENE OXIDE', 'ETHYLIDENE DICHLORIDE', 'FLUORINE', 'FORMALDEHYDE', 'FORMIC ACID', 'FREON 113', 'GLYCIDOL', 'HEXACHLORO-1,3-BUTADIENE', 'HEXACHLOROBENZENE', 'HEXACHLOROCYCLOPENTADIENE', 'HEXACHLOROETHANE', 'HYDRAZINE', 'HYDROCHLORIC ACID (1995 AND AFTER "ACID AEROSOLS" ONLY)', 'HYDROGEN CYANIDE', 'HYDROGEN FLUORIDE', 'HYDROGEN SULFIDE', 'HYDROQUINONE', 'ISOBUTYRALDEHYDE', 'ISOPRENE', 'LEAD', 'LEAD COMPOUNDS', 'LITHIUM CARBONATE', 'M-XYLENE', 'MALEIC ANHYDRIDE', 'MANGANESE', 'MANGANESE COMPOUNDS', 'MERCURY', 'MERCURY COMPOUNDS', 'METHACRYLONITRILE', 'METHANOL', 'METHOXONE SODIUM SALT', 'METHYL ACRYLATE', 'METHYL IODIDE', 'METHYL ISOBUTYL KETONE', 'METHYL METHACRYLATE', 'METHYL TERT-BUTYL ETHER', 'MOLYBDENUM TRIOXIDE', 'N,N-DIMETHYLFORMAMIDE', 'N-BUTYL ALCOHOL', 'N-HEXANE', 'N-METHYL-2-PYRROLIDONE', 'N-NITROSODIPHENYLAMINE', 'NAPHTHALENE', 'NICKEL', 'NICKEL COMPOUNDS', 'NICOTINE AND SALTS', 'NITRATE COMPOUNDS', 'NITRIC ACID', 'NITRILOTRIACETIC ACID', 'NITROBENZENE', 'NITROGLYCERIN', 'O-ANISIDINE', 'O-CRESOL', 'O-TOLUIDINE', 'O-XYLENE', 'OCTACHLORONAPHTHALENE', 'OCTACHLOROSTYRENE', 'OZONE', 'P-CRESOL', 'P-PHENYLENEDIAMINE', 'P-XYLENE', 'PENTACHLOROBENZENE', 'PENTACHLOROETHANE', 'PENTACHLOROPHENOL', 'PERACETIC ACID', 'PHENANTHRENE', 'PHENOL', 'PHOSGENE', 'PHOSPHORUS (YELLOW OR WHITE)', 'PHTHALIC ANHYDRIDE', 'PICLORAM', 'PICRIC ACID', 'POLYCHLORINATED ALKANES', 'POLYCHLORINATED BIPHENYLS', 'POLYCYCLIC AROMATIC COMPOUNDS', 'POTASSIUM DIMETHYLDITHIOCARBAMATE', 'PROPARGYL ALCOHOL', 'PROPIONALDEHYDE', 'PROPYLENE', 'PROPYLENE OXIDE', 'PYRIDINE', 'QUINOLINE', 'QUINONE', 'SEC-BUTYL ALCOHOL', 'SELENIUM', 'SELENIUM COMPOUNDS', 'SILVER', 'SILVER COMPOUNDS', 'SODIUM NITRITE', 'STYRENE', 'SULFURIC ACID (1994 AND AFTER "ACID AEROSOLS" ONLY)', 'SULFURYL FLUORIDE', 'TERT-BUTYL ALCOHOL', 'TETRABROMOBISPHENOL A', 'TETRACHLOROETHYLENE', 'THALLIUM', 'THALLIUM COMPOUNDS', 'THIRAM', 'THORIUM DIOXIDE', 'TITANIUM TETRACHLORIDE', 'TOLUENE', 'TOLUENE DIISOCYANATE (MIXED ISOMERS)', 'TRANS-1,3-DICHLOROPROPENE', 'TRICHLOROETHYLENE', 'TRICHLOROFLUOROMETHANE', 'TRIETHYLAMINE', 'URETHANE', 'VANADIUM (EXCEPT WHEN CONTAINED IN AN ALLOY)', 'VANADIUM COMPOUNDS', 'VINYL ACETATE', 'VINYL CHLORIDE', 'VINYLIDENE CHLORIDE', 'XYLENE (MIXED ISOMERS)', 'ZINC (FUME OR DUST)', 'ZINC COMPOUNDS']
# Here you have to replace this line with the columns currently in use by the type of emissions
#MANUAL WORK MUST STOP HERE CODE
#Solving the problem where there are multiple TRI IDS for the SAME EGRID ID. ALL we need to do is sum them up.
#Change the next line for every run
#tri1 = tri.groupby(['EGRID ID'], as_index=False)['1,1,1,2-TETRACHLOROETHANE', '1,1,1-TRICHLOROETHANE', '1,1,2,2-TETRACHLOROETHANE', '1,1,2-TRICHLOROETHANE', '1,2,3-TRICHLOROPROPANE', '1,2,4-TRICHLOROBENZENE', '1,2,4-TRIMETHYLBENZENE', '1,2-BUTYLENE OXIDE', '1,2-DIBROMOETHANE', '1,2-DICHLOROETHANE', '1,2-DICHLOROETHYLENE', '1,2-DICHLOROPROPANE', '1,2-PHENYLENEDIAMINE', '1,3-BUTADIENE', '1,3-DICHLOROPROPYLENE', '1,3-PHENYLENEDIAMINE', '1,4-DICHLORO-2-BUTENE', '1,4-DIOXANE', '1-(3-CHLOROALLYL)-3,5,7-TRIAZA-1-AZONIAADAMANTANE CHLORIDE', '2,2-DICHLORO-1,1,1-TRIFLUOROETHANE', '2,3-DICHLOROPROPENE', '2,4,6-TRICHLOROPHENOL', '2,4-DIAMINOTOLUENE', '2,4-DICHLOROPHENOL', '2,4-DIMETHYLPHENOL', '2,4-DINITROPHENOL', '2,4-DINITROTOLUENE', '2-ETHOXYETHANOL', '2-METHOXYETHANOL', '2-METHYLLACTONITRILE', '2-METHYLPYRIDINE', '2-PHENYLPHENOL', "4,4'-ISOPROPYLIDENEDIPHENOL", "4,4'-METHYLENEDIANILINE", 'ACETALDEHYDE', 'ACETAMIDE', 'ACETONITRILE', 'ACETOPHENONE', 'ACROLEIN', 'ACRYLAMIDE', 'ACRYLIC ACID', 'ACRYLONITRILE', 'ALLYL ALCOHOL', 'ALLYL CHLORIDE', 'ALUMINUM (FUME OR DUST)', 'ALUMINUM OXIDE (FIBROUS FORMS)', 'AMMONIA', 'ANILINE', 'ANTHRACENE', 'ANTIMONY', 'ANTIMONY COMPOUNDS', 'ARSENIC', 'ARSENIC COMPOUNDS', 'ASBESTOS (FRIABLE)', 'BARIUM', 'BARIUM COMPOUNDS', 'BENZENE', 'BENZO(G,H,I)PERYLENE', 'BENZOYL CHLORIDE', 'BENZYL CHLORIDE', 'BERYLLIUM', 'BERYLLIUM COMPOUNDS', 'BIPHENYL', 'BIS(2-CHLORO-1-METHYLETHYL) ETHER', 'BIS(2-CHLOROETHYL) ETHER', 'BORON TRIFLUORIDE', 'BROMINE', 'BROMOFORM', 'BROMOMETHANE', 'BUTYL ACRYLATE', 'BUTYRALDEHYDE', 'CADMIUM', 'CADMIUM COMPOUNDS', 'CARBON DISULFIDE', 'CARBON TETRACHLORIDE', 'CARBONYL SULFIDE', 'CATECHOL', 'CERTAIN GLYCOL ETHERS', 'CHLORINE', 'CHLORINE DIOXIDE', 'CHLOROBENZENE', 'CHLORODIFLUOROMETHANE', 'CHLOROETHANE', 'CHLOROFORM', 'CHLOROMETHANE', 'CHLOROPRENE', 'CHROMIUM', 'CHROMIUM COMPOUNDS(EXCEPT CHROMITE ORE MINED IN THE TRANSVAAL REGION)', 'COBALT', 'COBALT COMPOUNDS', 'COPPER', 'COPPER COMPOUNDS', 'CREOSOTE', 'CRESOL (MIXED ISOMERS)', 'CROTONALDEHYDE', 'CUMENE', 'CUMENE HYDROPEROXIDE', 'CYANIDE COMPOUNDS', 'CYCLOHEXANE', 'CYCLOHEXANOL', 'DAZOMET', 'DI(2-ETHYLHEXYL) PHTHALATE', 'DIAMINOTOLUENE (MIXED ISOMERS)', 'DIBENZOFURAN', 'DIBUTYL PHTHALATE', 'DICHLOROBENZENE (MIXED ISOMERS)', 'DICHLOROBROMOMETHANE', 'DICHLORODIFLUOROMETHANE', 'DICHLOROMETHANE', 'DICHLOROTRIFLUOROETHANE', 'DICYCLOPENTADIENE', 'DIETHANOLAMINE', 'DIISOCYANATES', 'DIMETHYL PHTHALATE', 'DIMETHYL SULFATE', 'DIMETHYLAMINE', 'DINITROTOLUENE (MIXED ISOMERS)', 'DIOXIN AND DIOXIN-LIKE COMPOUNDS', 'DIPHENYLAMINE', 'DIPOTASSIUM ENDOTHALL', 'EPICHLOROHYDRIN', 'ETHYL ACRYLATE', 'ETHYLBENZENE', 'ETHYLENE', 'ETHYLENE GLYCOL', 'ETHYLENE OXIDE', 'ETHYLIDENE DICHLORIDE', 'FLUORINE', 'FORMALDEHYDE', 'FORMIC ACID', 'FREON 113', 'GLYCIDOL', 'HEXACHLORO-1,3-BUTADIENE', 'HEXACHLOROBENZENE', 'HEXACHLOROCYCLOPENTADIENE', 'HEXACHLOROETHANE', 'HYDRAZINE', 'HYDROCHLORIC ACID (1995 AND AFTER "ACID AEROSOLS" ONLY)', 'HYDROGEN CYANIDE', 'HYDROGEN FLUORIDE', 'HYDROGEN SULFIDE', 'HYDROQUINONE', 'ISOBUTYRALDEHYDE', 'ISOPRENE', 'LEAD', 'LEAD COMPOUNDS', 'LITHIUM CARBONATE', 'M-XYLENE', 'MALEIC ANHYDRIDE', 'MANGANESE', 'MANGANESE COMPOUNDS', 'MERCURY', 'MERCURY COMPOUNDS', 'METHACRYLONITRILE', 'METHANOL', 'METHOXONE SODIUM SALT', 'METHYL ACRYLATE', 'METHYL IODIDE', 'METHYL ISOBUTYL KETONE', 'METHYL METHACRYLATE', 'METHYL TERT-BUTYL ETHER', 'MOLYBDENUM TRIOXIDE', 'N,N-DIMETHYLFORMAMIDE', 'N-BUTYL ALCOHOL', 'N-HEXANE', 'N-METHYL-2-PYRROLIDONE', 'N-NITROSODIPHENYLAMINE', 'NAPHTHALENE', 'NICKEL', 'NICKEL COMPOUNDS', 'NICOTINE AND SALTS', 'NITRATE COMPOUNDS', 'NITRIC ACID', 'NITRILOTRIACETIC ACID', 'NITROBENZENE', 'NITROGLYCERIN', 'O-ANISIDINE', 'O-CRESOL', 'O-TOLUIDINE', 'O-XYLENE', 'OCTACHLORONAPHTHALENE', 'OCTACHLOROSTYRENE', 'OZONE', 'P-CRESOL', 'P-PHENYLENEDIAMINE', 'P-XYLENE', 'PENTACHLOROBENZENE', 'PENTACHLOROETHANE', 'PENTACHLOROPHENOL', 'PERACETIC ACID', 'PHENANTHRENE', 'PHENOL', 'PHOSGENE', 'PHOSPHORUS (YELLOW OR WHITE)', 'PHTHALIC ANHYDRIDE', 'PICLORAM', 'PICRIC ACID', 'POLYCHLORINATED ALKANES', 'POLYCHLORINATED BIPHENYLS', 'POLYCYCLIC AROMATIC COMPOUNDS', 'POTASSIUM DIMETHYLDITHIOCARBAMATE', 'PROPARGYL ALCOHOL', 'PROPIONALDEHYDE', 'PROPYLENE', 'PROPYLENE OXIDE', 'PYRIDINE', 'QUINOLINE', 'QUINONE', 'SEC-BUTYL ALCOHOL', 'SELENIUM', 'SELENIUM COMPOUNDS', 'SILVER', 'SILVER COMPOUNDS', 'SODIUM NITRITE', 'STYRENE', 'SULFURIC ACID (1994 AND AFTER "ACID AEROSOLS" ONLY)', 'SULFURYL FLUORIDE', 'TERT-BUTYL ALCOHOL', 'TETRABROMOBISPHENOL A', 'TETRACHLOROETHYLENE', 'THALLIUM', 'THALLIUM COMPOUNDS', 'THIRAM', 'THORIUM DIOXIDE', 'TITANIUM TETRACHLORIDE', 'TOLUENE', 'TOLUENE DIISOCYANATE (MIXED ISOMERS)', 'TRANS-1,3-DICHLOROPROPENE', 'TRICHLOROETHYLENE', 'TRICHLOROFLUOROMETHANE', 'TRIETHYLAMINE', 'URETHANE', 'VANADIUM (EXCEPT WHEN CONTAINED IN AN ALLOY)', 'VANADIUM COMPOUNDS', 'VINYL ACETATE', 'VINYL CHLORIDE', 'VINYLIDENE CHLORIDE', 'XYLENE (MIXED ISOMERS)', 'ZINC (FUME OR DUST)', 'ZINC COMPOUNDS'].sum()
#tri1 = tri.groupby(['EGRID ID'], as_index=False)['TRIFID', 'FACILITY NAME', 'UNITS', 'PNAME', 'EGRID ID', '1,1,1-TRICHLOROETHANE', '1,1,2,2-TETRACHLOROETHANE', '1,1,2-TRICHLOROETHANE', '1,2,4-TRIMETHYLBENZENE', '1,2-DICHLOROETHANE', '1,2-DICHLOROETHYLENE', '1,3-BUTADIENE', '1,3-DICHLOROPROPYLENE', '1,4-DICHLORO-2-BUTENE', '2,4-DIMETHYLPHENOL', 'ACETALDEHYDE', 'ACETOPHENONE', 'AMMONIA', 'ANTHRACENE', 'ANTIMONY COMPOUNDS', 'ARSENIC COMPOUNDS', 'BARIUM COMPOUNDS', 'BENZENE', 'BENZO(G,H,I)PERYLENE', 'BERYLLIUM COMPOUNDS', 'BIPHENYL', 'BIS(2-CHLOROETHYL) ETHER', 'CADMIUM COMPOUNDS', 'CARBON DISULFIDE', 'CARBON TETRACHLORIDE', 'CARBONYL SULFIDE', 'CERTAIN GLYCOL ETHERS', 'CHLORINE', 'CHLOROBENZENE', 'CHLOROETHANE', 'CHLOROFORM', 'CHLOROMETHANE', 'CHROMIUM', 'CHROMIUM COMPOUNDS(EXCEPT CHROMITE ORE MINED IN THE TRANSVAAL REGION)', 'COBALT', 'COBALT COMPOUNDS', 'COPPER COMPOUNDS', 'CRESOL (MIXED ISOMERS)', 'CUMENE', 'CUMENE HYDROPEROXIDE', 'CYANIDE COMPOUNDS', 'CYCLOHEXANE', 'DI(2-ETHYLHEXYL) PHTHALATE', 'DIBENZOFURAN', 'DICHLOROMETHANE', 'DICYCLOPENTADIENE', 'DIETHANOLAMINE', 'DIOXIN AND DIOXIN-LIKE COMPOUNDS', 'ETHYLBENZENE', 'ETHYLENE', 'ETHYLENE GLYCOL', 'ETHYLENE OXIDE', 'ETHYLIDENE DICHLORIDE', 'FORMALDEHYDE', 'HEXACHLORO-1,3-BUTADIENE', 'HEXACHLOROBENZENE', 'HEXACHLOROETHANE', 'HYDROGEN CYANIDE', 'HYDROGEN FLUORIDE', 'HYDROGEN SULFIDE', 'ISOPRENE', 'LEAD', 'LEAD COMPOUNDS', 'LITHIUM CARBONATE', 'M-XYLENE', 'MANGANESE', 'MANGANESE COMPOUNDS', 'MERCURY', 'MERCURY COMPOUNDS', 'METHANOL', 'METHYL ISOBUTYL KETONE', 'MOLYBDENUM TRIOXIDE', 'N,N-DIMETHYLFORMAMIDE', 'N-HEXANE', 'N-METHYL-2-PYRROLIDONE', 'NAPHTHALENE', 'NICKEL', 'NICKEL COMPOUNDS', 'NITRATE COMPOUNDS', 'NITRIC ACID', 'O-CRESOL', 'O-XYLENE', 'OCTACHLOROSTYRENE', 'P-CRESOL', 'P-XYLENE', 'PENTACHLOROBENZENE', 'PENTACHLOROETHANE', 'PHENANTHRENE', 'PHENOL', 'POLYCHLORINATED BIPHENYLS', 'POLYCYCLIC AROMATIC COMPOUNDS', 'PROPYLENE', 'PYRIDINE', 'QUINOLINE', 'SELENIUM COMPOUNDS', 'SILVER COMPOUNDS', 'SODIUM NITRITE', 'STYRENE', 'TERT-BUTYL ALCOHOL', 'TETRACHLOROETHYLENE', 'THALLIUM COMPOUNDS', 'TOLUENE', 'TRICHLOROETHYLENE', 'VANADIUM COMPOUNDS', 'VINYL CHLORIDE', 'VINYLIDENE CHLORIDE', 'XYLENE (MIXED ISOMERS)', 'ZINC COMPOUNDS'].sum()
#tri1 = tri.groupby(['EGRID ID'], as_index=False)['TRIFID', 'FACILITY NAME', 'UNITS', 'PNAME', 'EGRID ID', 'AMMONIA', 'ANTIMONY COMPOUNDS', 'ARSENIC COMPOUNDS', 'BARIUM COMPOUNDS', 'BERYLLIUM COMPOUNDS', 'CHROMIUM COMPOUNDS(EXCEPT CHROMITE ORE MINED IN THE TRANSVAAL REGION)', 'COBALT COMPOUNDS', 'COPPER COMPOUNDS', 'DIOXIN AND DIOXIN-LIKE COMPOUNDS', 'HYDROGEN FLUORIDE', 'HYDROGEN SULFIDE', 'LEAD COMPOUNDS', 'MANGANESE COMPOUNDS', 'MERCURY COMPOUNDS', 'MOLYBDENUM TRIOXIDE', 'NICKEL COMPOUNDS', 'POLYCYCLIC AROMATIC COMPOUNDS', 'SELENIUM COMPOUNDS', 'THALLIUM COMPOUNDS', 'VANADIUM COMPOUNDS', 'ZINC COMPOUNDS'].sum();
#tri1 = tri.groupby(['EGRID ID'], as_index=False)['TRIFID', 'FACILITY NAME', 'UNITS', 'PNAME', 'EGRID ID', 'AMMONIA', 'ARSENIC COMPOUNDS', 'BARIUM COMPOUNDS', 'BERYLLIUM COMPOUNDS', 'CHROMIUM COMPOUNDS(EXCEPT CHROMITE ORE MINED IN THE TRANSVAAL REGION)', 'COBALT COMPOUNDS', 'COPPER COMPOUNDS', 'DIOXIN AND DIOXIN-LIKE COMPOUNDS', 'LEAD COMPOUNDS', 'MANGANESE COMPOUNDS', 'MERCURY COMPOUNDS', 'NICKEL COMPOUNDS', 'POLYCYCLIC AROMATIC COMPOUNDS', 'SELENIUM COMPOUNDS', 'THALLIUM COMPOUNDS', 'VANADIUM COMPOUNDS', 'ZINC COMPOUNDS'].sum();
#tri1 = tri.groupby(['EGRID ID'], as_index=False)['TRIFID', 'FACILITY NAME', 'UNITS', 'PNAME', 'EGRID ID', 'AMMONIA', 'ARSENIC COMPOUNDS', 'BARIUM COMPOUNDS', 'CHROMIUM COMPOUNDS(EXCEPT CHROMITE ORE MINED IN THE TRANSVAAL REGION)', 'COBALT COMPOUNDS', 'COPPER COMPOUNDS', 'DIOXIN AND DIOXIN-LIKE COMPOUNDS', 'LEAD COMPOUNDS', 'MANGANESE COMPOUNDS', 'MERCURY COMPOUNDS', 'NICKEL COMPOUNDS', 'POLYCYCLIC AROMATIC COMPOUNDS', 'VANADIUM COMPOUNDS', 'ZINC COMPOUNDS'].sum();
#tri1 = tri.groupby(['EGRID ID'], as_index=False)['TRIFID', 'FACILITY NAME', 'UNITS', 'PNAME', 'EGRID ID', 'AMMONIA', 'ARSENIC COMPOUNDS', 'BARIUM COMPOUNDS', 'CHROMIUM COMPOUNDS(EXCEPT CHROMITE ORE MINED IN THE TRANSVAAL REGION)', 'COBALT COMPOUNDS', 'COPPER COMPOUNDS', 'DIOXIN AND DIOXIN-LIKE COMPOUNDS', 'LEAD COMPOUNDS', 'MANGANESE COMPOUNDS', 'MERCURY COMPOUNDS', 'NICKEL COMPOUNDS', 'POLYCYCLIC AROMATIC COMPOUNDS', 'VANADIUM COMPOUNDS', 'ZINC COMPOUNDS'].sum();
#tri1 = tri.groupby(['EGRID ID'], as_index=False)['1,1,1,2-TETRACHLOROETHANE', '1,1,1-TRICHLOROETHANE', '1,1,2,2-TETRACHLOROETHANE', '1,1,2-TRICHLOROETHANE', '1,2,3-TRICHLOROPROPANE', '1,2,4-TRICHLOROBENZENE', '1,2,4-TRIMETHYLBENZENE', '1,2-BUTYLENE OXIDE', '1,2-DIBROMOETHANE', '1,2-DICHLOROETHANE', '1,2-DICHLOROETHYLENE', '1,2-DICHLOROPROPANE', '1,2-PHENYLENEDIAMINE', '1,3-BUTADIENE', '1,3-DICHLOROPROPYLENE', '1,3-PHENYLENEDIAMINE', '1,4-DICHLORO-2-BUTENE', '1,4-DIOXANE', '1-(3-CHLOROALLYL)-3,5,7-TRIAZA-1-AZONIAADAMANTANE CHLORIDE', '2,2-DICHLORO-1,1,1-TRIFLUOROETHANE', '2,3-DICHLOROPROPENE', '2,4,6-TRICHLOROPHENOL', '2,4-DIAMINOTOLUENE', '2,4-DICHLOROPHENOL', '2,4-DIMETHYLPHENOL', '2,4-DINITROPHENOL', '2,4-DINITROTOLUENE', '2-ETHOXYETHANOL', '2-METHOXYETHANOL', '2-METHYLLACTONITRILE', '2-METHYLPYRIDINE', '2-PHENYLPHENOL', "4,4'-ISOPROPYLIDENEDIPHENOL", "4,4'-METHYLENEDIANILINE", 'ACETALDEHYDE', 'ACETAMIDE', 'ACETONITRILE', 'ACETOPHENONE', 'ACROLEIN', 'ACRYLAMIDE', 'ACRYLIC ACID', 'ACRYLONITRILE', 'ALLYL ALCOHOL', 'ALLYL CHLORIDE', 'ALUMINUM (FUME OR DUST)', 'ALUMINUM OXIDE (FIBROUS FORMS)', 'AMMONIA', 'ANILINE', 'ANTHRACENE', 'ANTIMONY', 'ANTIMONY COMPOUNDS', 'ARSENIC', 'ARSENIC COMPOUNDS', 'ASBESTOS (FRIABLE)', 'BARIUM', 'BARIUM COMPOUNDS', 'BENZENE', 'BENZO(G,H,I)PERYLENE', 'BENZOYL CHLORIDE', 'BENZYL CHLORIDE', 'BERYLLIUM', 'BERYLLIUM COMPOUNDS', 'BIPHENYL', 'BIS(2-CHLORO-1-METHYLETHYL) ETHER', 'BIS(2-CHLOROETHYL) ETHER', 'BORON TRIFLUORIDE', 'BROMINE', 'BROMOFORM', 'BROMOMETHANE', 'BUTYL ACRYLATE', 'BUTYRALDEHYDE', 'CADMIUM', 'CADMIUM COMPOUNDS', 'CARBON DISULFIDE', 'CARBON TETRACHLORIDE', 'CARBONYL SULFIDE', 'CATECHOL', 'CERTAIN GLYCOL ETHERS', 'CHLORINE', 'CHLORINE DIOXIDE', 'CHLOROBENZENE', 'CHLORODIFLUOROMETHANE', 'CHLOROETHANE', 'CHLOROFORM', 'CHLOROMETHANE', 'CHLOROPRENE', 'CHROMIUM', 'CHROMIUM COMPOUNDS(EXCEPT CHROMITE ORE MINED IN THE TRANSVAAL REGION)', 'COBALT', 'COBALT COMPOUNDS', 'COPPER', 'COPPER COMPOUNDS', 'CREOSOTE', 'CRESOL (MIXED ISOMERS)', 'CROTONALDEHYDE', 'CUMENE', 'CUMENE HYDROPEROXIDE', 'CYANIDE COMPOUNDS', 'CYCLOHEXANE', 'CYCLOHEXANOL', 'DAZOMET', 'DI(2-ETHYLHEXYL) PHTHALATE', 'DIAMINOTOLUENE (MIXED ISOMERS)', 'DIBENZOFURAN', 'DIBUTYL PHTHALATE', 'DICHLOROBENZENE (MIXED ISOMERS)', 'DICHLOROBROMOMETHANE', 'DICHLORODIFLUOROMETHANE', 'DICHLOROMETHANE', 'DICHLOROTRIFLUOROETHANE', 'DICYCLOPENTADIENE', 'DIETHANOLAMINE', 'DIISOCYANATES', 'DIMETHYL PHTHALATE', 'DIMETHYL SULFATE', 'DIMETHYLAMINE', 'DINITROTOLUENE (MIXED ISOMERS)', 'DIOXIN AND DIOXIN-LIKE COMPOUNDS', 'DIPHENYLAMINE', 'DIPOTASSIUM ENDOTHALL', 'EPICHLOROHYDRIN', 'ETHYL ACRYLATE', 'ETHYLBENZENE', 'ETHYLENE', 'ETHYLENE GLYCOL', 'ETHYLENE OXIDE', 'ETHYLIDENE DICHLORIDE', 'FLUORINE', 'FORMALDEHYDE', 'FORMIC ACID', 'FREON 113', 'GLYCIDOL', 'HEXACHLORO-1,3-BUTADIENE', 'HEXACHLOROBENZENE', 'HEXACHLOROCYCLOPENTADIENE', 'HEXACHLOROETHANE', 'HYDRAZINE', 'HYDROCHLORIC ACID (1995 AND AFTER "ACID AEROSOLS" ONLY)', 'HYDROGEN CYANIDE', 'HYDROGEN FLUORIDE', 'HYDROGEN SULFIDE', 'HYDROQUINONE', 'ISOBUTYRALDEHYDE', 'ISOPRENE', 'LEAD', 'LEAD COMPOUNDS', 'LITHIUM CARBONATE', 'M-XYLENE', 'MALEIC ANHYDRIDE', 'MANGANESE', 'MANGANESE COMPOUNDS', 'MERCURY', 'MERCURY COMPOUNDS', 'METHACRYLONITRILE', 'METHANOL', 'METHOXONE SODIUM SALT', 'METHYL ACRYLATE', 'METHYL IODIDE', 'METHYL ISOBUTYL KETONE', 'METHYL METHACRYLATE', 'METHYL TERT-BUTYL ETHER', 'MOLYBDENUM TRIOXIDE', 'N,N-DIMETHYLFORMAMIDE', 'N-BUTYL ALCOHOL', 'N-HEXANE', 'N-METHYL-2-PYRROLIDONE', 'N-NITROSODIPHENYLAMINE', 'NAPHTHALENE', 'NICKEL', 'NICKEL COMPOUNDS', 'NICOTINE AND SALTS', 'NITRATE COMPOUNDS', 'NITRIC ACID', 'NITRILOTRIACETIC ACID', 'NITROBENZENE', 'NITROGLYCERIN', 'O-ANISIDINE', 'O-CRESOL', 'O-TOLUIDINE', 'O-XYLENE', 'OCTACHLORONAPHTHALENE', 'OCTACHLOROSTYRENE', 'OZONE', 'P-CRESOL', 'P-PHENYLENEDIAMINE', 'P-XYLENE', 'PENTACHLOROBENZENE', 'PENTACHLOROETHANE', 'PENTACHLOROPHENOL', 'PERACETIC ACID', 'PHENANTHRENE', 'PHENOL', 'PHOSGENE', 'PHOSPHORUS (YELLOW OR WHITE)', 'PHTHALIC ANHYDRIDE', 'PICLORAM', 'PICRIC ACID', 'POLYCHLORINATED ALKANES', 'POLYCHLORINATED BIPHENYLS', 'POLYCYCLIC AROMATIC COMPOUNDS', 'POTASSIUM DIMETHYLDITHIOCARBAMATE', 'PROPARGYL ALCOHOL', 'PROPIONALDEHYDE', 'PROPYLENE', 'PROPYLENE OXIDE', 'PYRIDINE', 'QUINOLINE', 'QUINONE', 'SEC-BUTYL ALCOHOL', 'SELENIUM', 'SELENIUM COMPOUNDS', 'SILVER', 'SILVER COMPOUNDS', 'SODIUM NITRITE', 'STYRENE', 'SULFURIC ACID (1994 AND AFTER "ACID AEROSOLS" ONLY)', 'SULFURYL FLUORIDE', 'TERT-BUTYL ALCOHOL', 'TETRABROMOBISPHENOL A', 'TETRACHLOROETHYLENE', 'THALLIUM', 'THALLIUM COMPOUNDS', 'THIRAM', 'THORIUM DIOXIDE', 'TITANIUM TETRACHLORIDE', 'TOLUENE', 'TOLUENE DIISOCYANATE (MIXED ISOMERS)', 'TRANS-1,3-DICHLOROPROPENE', 'TRICHLOROETHYLENE', 'TRICHLOROFLUOROMETHANE', 'TRIETHYLAMINE', 'URETHANE', 'VANADIUM (EXCEPT WHEN CONTAINED IN AN ALLOY)', 'VANADIUM COMPOUNDS', 'VINYL ACETATE', 'VINYL CHLORIDE', 'VINYLIDENE CHLORIDE', 'XYLENE (MIXED ISOMERS)', 'ZINC (FUME OR DUST)', 'ZINC COMPOUNDS'].sum()
#tri1 = tri.groupby(['EGRID ID'], as_index=False)['1,1,1,2-TETRACHLOROETHANE', '1,1,1-TRICHLOROETHANE', '1,1,2,2-TETRACHLOROETHANE', '1,1,2-TRICHLOROETHANE', '1,2,3-TRICHLOROPROPANE', '1,2,4-TRICHLOROBENZENE', '1,2,4-TRIMETHYLBENZENE', '1,2-BUTYLENE OXIDE', '1,2-DIBROMOETHANE', '1,2-DICHLOROETHANE', '1,2-DICHLOROETHYLENE', '1,2-DICHLOROPROPANE', '1,2-PHENYLENEDIAMINE', '1,3-BUTADIENE', '1,3-DICHLOROPROPYLENE', '1,3-PHENYLENEDIAMINE', '1,4-DICHLORO-2-BUTENE', '1,4-DIOXANE', '1-(3-CHLOROALLYL)-3,5,7-TRIAZA-1-AZONIAADAMANTANE CHLORIDE', '2,2-DICHLORO-1,1,1-TRIFLUOROETHANE', '2,3-DICHLOROPROPENE', '2,4,6-TRICHLOROPHENOL', '2,4-DIAMINOTOLUENE', '2,4-DICHLOROPHENOL', '2,4-DIMETHYLPHENOL', '2,4-DINITROPHENOL', '2,4-DINITROTOLUENE', '2-ETHOXYETHANOL', '2-METHOXYETHANOL', '2-METHYLLACTONITRILE', '2-METHYLPYRIDINE', '2-PHENYLPHENOL', "4,4'-ISOPROPYLIDENEDIPHENOL", "4,4'-METHYLENEDIANILINE", 'ACETALDEHYDE', 'ACETAMIDE', 'ACETONITRILE', 'ACETOPHENONE', 'ACROLEIN', 'ACRYLAMIDE', 'ACRYLIC ACID', 'ACRYLONITRILE', 'ALLYL ALCOHOL', 'ALLYL CHLORIDE', 'ALUMINUM (FUME OR DUST)', 'ALUMINUM OXIDE (FIBROUS FORMS)', 'AMMONIA', 'ANILINE', 'ANTHRACENE', 'ANTIMONY', 'ANTIMONY COMPOUNDS', 'ARSENIC', 'ARSENIC COMPOUNDS', 'ASBESTOS (FRIABLE)', 'BARIUM', 'BARIUM COMPOUNDS', 'BENZENE', 'BENZO(G,H,I)PERYLENE', 'BENZOYL CHLORIDE', 'BENZYL CHLORIDE', 'BERYLLIUM', 'BERYLLIUM COMPOUNDS', 'BIPHENYL', 'BIS(2-CHLORO-1-METHYLETHYL) ETHER', 'BIS(2-CHLOROETHYL) ETHER', 'BORON TRIFLUORIDE', 'BROMINE', 'BROMOFORM', 'BROMOMETHANE', 'BUTYL ACRYLATE', 'BUTYRALDEHYDE', 'CADMIUM', 'CADMIUM COMPOUNDS', 'CARBON DISULFIDE', 'CARBON TETRACHLORIDE', 'CARBONYL SULFIDE', 'CATECHOL', 'CERTAIN GLYCOL ETHERS', 'CHLORINE', 'CHLORINE DIOXIDE', 'CHLOROBENZENE', 'CHLORODIFLUOROMETHANE', 'CHLOROETHANE', 'CHLOROFORM', 'CHLOROMETHANE', 'CHLOROPRENE', 'CHROMIUM', 'CHROMIUM COMPOUNDS(EXCEPT CHROMITE ORE MINED IN THE TRANSVAAL REGION)', 'COBALT', 'COBALT COMPOUNDS', 'COPPER', 'COPPER COMPOUNDS', 'CREOSOTE', 'CRESOL (MIXED ISOMERS)', 'CROTONALDEHYDE', 'CUMENE', 'CUMENE HYDROPEROXIDE', 'CYANIDE COMPOUNDS', 'CYCLOHEXANE', 'CYCLOHEXANOL', 'DAZOMET', 'DI(2-ETHYLHEXYL) PHTHALATE', 'DIAMINOTOLUENE (MIXED ISOMERS)', 'DIBENZOFURAN', 'DIBUTYL PHTHALATE', 'DICHLOROBENZENE (MIXED ISOMERS)', 'DICHLOROBROMOMETHANE', 'DICHLORODIFLUOROMETHANE', 'DICHLOROMETHANE', 'DICHLOROTRIFLUOROETHANE', 'DICYCLOPENTADIENE', 'DIETHANOLAMINE', 'DIISOCYANATES', 'DIMETHYL PHTHALATE', 'DIMETHYL SULFATE', 'DIMETHYLAMINE', 'DINITROTOLUENE (MIXED ISOMERS)', 'DIOXIN AND DIOXIN-LIKE COMPOUNDS', 'DIPHENYLAMINE', 'DIPOTASSIUM ENDOTHALL', 'EPICHLOROHYDRIN', 'ETHYL ACRYLATE', 'ETHYLBENZENE', 'ETHYLENE', 'ETHYLENE GLYCOL', 'ETHYLENE OXIDE', 'ETHYLIDENE DICHLORIDE', 'FLUORINE', 'FORMALDEHYDE', 'FORMIC ACID', 'FREON 113', 'GLYCIDOL', 'HEXACHLORO-1,3-BUTADIENE', 'HEXACHLOROBENZENE', 'HEXACHLOROCYCLOPENTADIENE', 'HEXACHLOROETHANE', 'HYDRAZINE', 'HYDROCHLORIC ACID (1995 AND AFTER "ACID AEROSOLS" ONLY)', 'HYDROGEN CYANIDE', 'HYDROGEN FLUORIDE', 'HYDROGEN SULFIDE', 'HYDROQUINONE', 'ISOBUTYRALDEHYDE', 'ISOPRENE', 'LEAD', 'LEAD COMPOUNDS', 'LITHIUM CARBONATE', 'M-XYLENE', 'MALEIC ANHYDRIDE', 'MANGANESE', 'MANGANESE COMPOUNDS', 'MERCURY', 'MERCURY COMPOUNDS', 'METHACRYLONITRILE', 'METHANOL', 'METHOXONE SODIUM SALT', 'METHYL ACRYLATE', 'METHYL IODIDE', 'METHYL ISOBUTYL KETONE', 'METHYL METHACRYLATE', 'METHYL TERT-BUTYL ETHER', 'MOLYBDENUM TRIOXIDE', 'N,N-DIMETHYLFORMAMIDE', 'N-BUTYL ALCOHOL', 'N-HEXANE', 'N-METHYL-2-PYRROLIDONE', 'N-NITROSODIPHENYLAMINE', 'NAPHTHALENE', 'NICKEL', 'NICKEL COMPOUNDS', 'NICOTINE AND SALTS', 'NITRATE COMPOUNDS', 'NITRIC ACID', 'NITRILOTRIACETIC ACID', 'NITROBENZENE', 'NITROGLYCERIN', 'O-ANISIDINE', 'O-CRESOL', 'O-TOLUIDINE', 'O-XYLENE', 'OCTACHLORONAPHTHALENE', 'OCTACHLOROSTYRENE', 'OZONE', 'P-CRESOL', 'P-PHENYLENEDIAMINE', 'P-XYLENE', 'PENTACHLOROBENZENE', 'PENTACHLOROETHANE', 'PENTACHLOROPHENOL', 'PERACETIC ACID', 'PHENANTHRENE', 'PHENOL', 'PHOSGENE', 'PHOSPHORUS (YELLOW OR WHITE)', 'PHTHALIC ANHYDRIDE', 'PICLORAM', 'PICRIC ACID', 'POLYCHLORINATED ALKANES', 'POLYCHLORINATED BIPHENYLS', 'POLYCYCLIC AROMATIC COMPOUNDS', 'POTASSIUM DIMETHYLDITHIOCARBAMATE', 'PROPARGYL ALCOHOL', 'PROPIONALDEHYDE', 'PROPYLENE', 'PROPYLENE OXIDE', 'PYRIDINE', 'QUINOLINE', 'QUINONE', 'SEC-BUTYL ALCOHOL', 'SELENIUM', 'SELENIUM COMPOUNDS', 'SILVER', 'SILVER COMPOUNDS', 'SODIUM NITRITE', 'STYRENE', 'SULFURIC ACID (1994 AND AFTER "ACID AEROSOLS" ONLY)', 'SULFURYL FLUORIDE', 'TERT-BUTYL ALCOHOL', 'TETRABROMOBISPHENOL A', 'TETRACHLOROETHYLENE', 'THALLIUM', 'THALLIUM COMPOUNDS', 'THIRAM', 'THORIUM DIOXIDE', 'TITANIUM TETRACHLORIDE', 'TOLUENE', 'TOLUENE DIISOCYANATE (MIXED ISOMERS)', 'TRANS-1,3-DICHLOROPROPENE', 'TRICHLOROETHYLENE', 'TRICHLOROFLUOROMETHANE', 'TRIETHYLAMINE', 'URETHANE', 'VANADIUM (EXCEPT WHEN CONTAINED IN AN ALLOY)', 'VANADIUM COMPOUNDS', 'VINYL ACETATE', 'VINYL CHLORIDE', 'VINYLIDENE CHLORIDE', 'XYLENE (MIXED ISOMERS)', 'ZINC (FUME OR DUST)', 'ZINC COMPOUNDS'].sum()
#merger = egtribu[['TRIFID', 'FACILITY NAME','EGRID ID','UNITS']].copy()
#tri2 = pd.merge(merger,tri,left_on = ['EGRID ID'], right_on = ['EGRID ID'])
#tri3 = tri2.drop_duplicates(subset='EGRID ID', keep='first')          
#tri3.to_csv('tri3.csv')
#Many columns got deleted due to the previous operation. Bringing them and some more back from the Egrid File. Facility name no longer needed. 
#egrid = pd.read_csv("eGRIDPLNT2014.csv", header=0,usecols=['EGRID ID','Plant name','Generation'], nrows= 8504, error_bad_lines=False)
#tri3['EGRID ID'] = pd.to_numeric(tri3['EGRID ID'],errors = 'coerce')
#tri4 = pd.merge(egrid,tri3,left_on = ['EGRID ID'], right_on = ['EGRID ID'])
#del tri4['FACILITY NAME']
#tri4.to_csv('tri4.csv')
#**************************************************************************************************************************



#RUn this part separately from the other part because manual work is needed over here
#You have to convert from CSV tri4 to a excel file with name chk over here. chk should also have a Sheet1 file for the next part to work. 
#Be sure to change the loop sizes based on your created databases. Check the sizes from your chk file. Reading of columns sizes should also be changed
#Arrange your CHK file by Alphabetical sorting of TRIFID column 

#NO NEED FOR CHANGING FIGURES or SIZES in LOOPS JUST RUN  NO NEED. FOUND OUT LATER

#Solving the problem of Many Egrid IDS for one TRI ID. Need to disaggregate based on Generation. 
import matplotlib.pyplot as plt
import numpy as np
#import plotly.plotly as py
import openpyxl
from openpyxl.styles import Color, PatternFill, Font, Border
from openpyxl.styles import colors
import os
import statistics

print('Opening workbook...')



wb = openpyxl.load_workbook('tri4.xlsx')
wb1 = openpyxl.load_workbook('chk.xlsx')
sheet = wb1.get_sheet_by_name('Sheet1')
chk = wb.get_sheet_by_name('tri4')


egridid = chk['C2':'C864']
triid = chk['E2':'E864']
gen = chk['D2':'D864']

greenFill = PatternFill(start_color='FFADFFA4',
                   end_color='FFADFFA4',
                   fill_type='solid')


i = 0;
s = 0;

for k in range(1,247):
    v = chk.cell(row = 1, column = k).value;
    sheet.cell(row = 1, column = k).value = v;


while i < 863:
    s = triid[i][0].value
    sum = 0;
    ar = [];
    for j in range(0,863):
        if s == triid[j][0].value and gen[j][0].value != None and type(gen[j][0].value) != str:
            sum = sum + float(gen[j][0].value);
            ar.append(gen[j][0].value)
            
    if(len(ar)>1):
        print(i)
        for k in range(1,7):
           v = chk.cell(row = i+2, column = k).value;
           sheet.cell(row = i+2, column = k).value = v;
        for k in range(7,247):
           v = chk.cell(row = i+2, column = k).value;
           if(type(v)==float or type(v)==int):             
             sheet.cell(row = i+2, column = k).value = v*gen[i][0].value/sum;
             sheet.cell(row = i+2, column = k).fill = greenFill;
           
    else:
        for k in range(1,247):
            v = chk.cell(row = i+2, column = k).value;
            sheet.cell(row = i+2, column = k).value = v;
            
            
    i = i+1;      
    
    
wb1.save('temp.xlsx')    

